<?php

namespace App\Tests\Entity;

use App\Entity\PessoasLocadores;
use DateTime;
use PHPUnit\Framework\TestCase;

class PessoasLocadoresTest extends TestCase
{
    public function testCreatePessoaLocador(): void
    {
        $pessoaLocador = new PessoasLocadores();
        $this->assertInstanceOf(PessoasLocadores::class, $pessoaLocador);
    }

    public function testPessoaLocadorBasicGettersAndSetters(): void
    {
        $pessoaLocador = new PessoasLocadores();
        $idPessoa = 1;
        $dependentes = 2;
        $situacao = 1;
        $carencia = 30;
        $protesto = 1;
        $diasProtesto = 10;

        $pessoaLocador->setIdPessoa($idPessoa);
        $pessoaLocador->setDependentes($dependentes);
        $pessoaLocador->setSituacao($situacao);
        $pessoaLocador->setCarencia($carencia);
        $pessoaLocador->setProtesto($protesto);
        $pessoaLocador->setDiasProtesto($diasProtesto);

        $this->assertEquals($idPessoa, $pessoaLocador->getIdPessoa());
        $this->assertEquals($dependentes, $pessoaLocador->getDependentes());
        $this->assertEquals($situacao, $pessoaLocador->getSituacao());
        $this->assertEquals($carencia, $pessoaLocador->getCarencia());
        $this->assertEquals($protesto, $pessoaLocador->getProtesto());
        $this->assertEquals($diasProtesto, $pessoaLocador->getDiasProtesto());
    }

    public function testPessoaLocadorBooleanFields(): void
    {
        $pessoaLocador = new PessoasLocadores();
        
        $pessoaLocador->setCobrarCpmf(true);
        $pessoaLocador->setEtiqueta(false);
        $pessoaLocador->setCobrarTarifaRec(true);
        $pessoaLocador->setMultaItau(false);
        $pessoaLocador->setMoraDiaria(true);
        $pessoaLocador->setNaoGerarJudicial(false);
        $pessoaLocador->setEnderecoCobranca(true);
        $pessoaLocador->setCondominioConta(false);
        $pessoaLocador->setExtEmail(true);

        $this->assertTrue($pessoaLocador->getCobrarCpmf());
        $this->assertFalse($pessoaLocador->getEtiqueta());
        $this->assertTrue($pessoaLocador->getCobrarTarifaRec());
        $this->assertFalse($pessoaLocador->getMultaItau());
        $this->assertTrue($pessoaLocador->getMoraDiaria());
        $this->assertFalse($pessoaLocador->getNaoGerarJudicial());
        $this->assertTrue($pessoaLocador->getEnderecoCobranca());
        $this->assertFalse($pessoaLocador->getCondominioConta());
        $this->assertTrue($pessoaLocador->getExtEmail());
    }

    public function testPessoaLocadorNullableFields(): void
    {
        $pessoaLocador = new PessoasLocadores();
        
        // Test that nullable fields can be null
        $this->assertNull($pessoaLocador->getIdFormaRetirada());
        $this->assertNull($pessoaLocador->getDiaRetirada());
        $this->assertNull($pessoaLocador->getCodigoContabil());
        $this->assertNull($pessoaLocador->getDataFechamento());

        // Test setting nullable fields
        $pessoaLocador->setIdFormaRetirada(1);
        $pessoaLocador->setDiaRetirada(15);
        $pessoaLocador->setCodigoContabil(123);
        
        $dataFechamento = new DateTime('2024-12-31');
        $pessoaLocador->setDataFechamento($dataFechamento);

        $this->assertEquals(1, $pessoaLocador->getIdFormaRetirada());
        $this->assertEquals(15, $pessoaLocador->getDiaRetirada());
        $this->assertEquals(123, $pessoaLocador->getCodigoContabil());
        $this->assertEquals($dataFechamento, $pessoaLocador->getDataFechamento());
    }

    public function testPessoaLocadorId(): void
    {
        $pessoaLocador = new PessoasLocadores();
        
        // Test that ID starts as null (will be generated by DB)
        $this->assertNull($pessoaLocador->getId());
    }

    public function testPessoaLocadorMethodsExist(): void
    {
        $pessoaLocador = new PessoasLocadores();
        
        // Test basic methods
        $this->assertTrue(method_exists($pessoaLocador, 'getId'));
        $this->assertTrue(method_exists($pessoaLocador, 'getIdPessoa'));
        $this->assertTrue(method_exists($pessoaLocador, 'setIdPessoa'));
        
        // Test nullable field methods
        $this->assertTrue(method_exists($pessoaLocador, 'getIdFormaRetirada'));
        $this->assertTrue(method_exists($pessoaLocador, 'setIdFormaRetirada'));
        $this->assertTrue(method_exists($pessoaLocador, 'getDiaRetirada'));
        $this->assertTrue(method_exists($pessoaLocador, 'setDiaRetirada'));
        
        // Test boolean field methods
        $this->assertTrue(method_exists($pessoaLocador, 'getCobrarCpmf'));
        $this->assertTrue(method_exists($pessoaLocador, 'setCobrarCpmf'));
        $this->assertTrue(method_exists($pessoaLocador, 'getEtiqueta'));
        $this->assertTrue(method_exists($pessoaLocador, 'setEtiqueta'));
        
        // Test date field methods
        $this->assertTrue(method_exists($pessoaLocador, 'getDataFechamento'));
        $this->assertTrue(method_exists($pessoaLocador, 'setDataFechamento'));
    }

    public function testPessoaLocadorFluentInterface(): void
    {
        $pessoaLocador = new PessoasLocadores();
        
        // Test that setters return self for fluent interface
        $result = $pessoaLocador->setIdPessoa(1)
                              ->setDependentes(2)
                              ->setCobrarCpmf(true)
                              ->setEtiqueta(false)
                              ->setSituacao(1);
        
        $this->assertSame($pessoaLocador, $result);
        $this->assertEquals(1, $pessoaLocador->getIdPessoa());
        $this->assertEquals(2, $pessoaLocador->getDependentes());
        $this->assertTrue($pessoaLocador->getCobrarCpmf());
        $this->assertFalse($pessoaLocador->getEtiqueta());
        $this->assertEquals(1, $pessoaLocador->getSituacao());
    }

    public function testPessoaLocadorDependentesValues(): void
    {
        $pessoaLocador = new PessoasLocadores();
        
        // Test with different dependentes values
        $dependentesValues = [0, 1, 2, 5, 10];
        
        foreach ($dependentesValues as $dependentes) {
            $pessoaLocador->setDependentes($dependentes);
            $this->assertEquals($dependentes, $pessoaLocador->getDependentes());
        }
    }

    public function testPessoaLocadorDiaRetiradaValues(): void
    {
        $pessoaLocador = new PessoasLocadores();
        
        // Test with different day values (1-31)
        $dias = [1, 5, 10, 15, 20, 25, 31];
        
        foreach ($dias as $dia) {
            $pessoaLocador->setDiaRetirada($dia);
            $this->assertEquals($dia, $pessoaLocador->getDiaRetirada());
        }
    }

    public function testPessoaLocadorDateHandling(): void
    {
        $pessoaLocador = new PessoasLocadores();
        
        // Test with different date formats
        $dates = [
            new DateTime('2024-01-15'),
            new DateTime('2024-12-31'),
            new DateTime('2025-06-30')
        ];
        
        foreach ($dates as $date) {
            $pessoaLocador->setDataFechamento($date);
            $this->assertEquals($date, $pessoaLocador->getDataFechamento());
        }
        
        // Test setting to null
        $pessoaLocador->setDataFechamento(null);
        $this->assertNull($pessoaLocador->getDataFechamento());
    }
}
