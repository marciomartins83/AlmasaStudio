<?php

namespace App\Tests\Entity;

use App\Entity\EstadoCivil;
use PHPUnit\Framework\TestCase;

class EstadoCivilTest extends TestCase
{
    public function testCreateEstadoCivil(): void
    {
        $estadoCivil = new EstadoCivil();
        $this->assertInstanceOf(EstadoCivil::class, $estadoCivil);
    }

    public function testEstadoCivilGettersAndSetters(): void
    {
        $estadoCivil = new EstadoCivil();
        $nome = "Solteiro";

        $estadoCivil->setNome($nome);

        $this->assertEquals($nome, $estadoCivil->getNome());
    }

    public function testEstadoCivilId(): void
    {
        $estadoCivil = new EstadoCivil();
        
        // Test that ID starts as null (will be generated by DB)
        $this->assertNull($estadoCivil->getId());
    }

    public function testEstadoCivilMethodsExist(): void
    {
        $estadoCivil = new EstadoCivil();
        
        // Test that all required methods exist
        $this->assertTrue(method_exists($estadoCivil, 'getId'));
        $this->assertTrue(method_exists($estadoCivil, 'getNome'));
        $this->assertTrue(method_exists($estadoCivil, 'setNome'));
    }

    public function testEstadoCivilVariousStates(): void
    {
        $estadoCivil = new EstadoCivil();
        
        // Test with different marital states
        $estadosCivis = [
            "Solteiro",
            "Casado",
            "Divorciado",
            "Viúvo",
            "Separado",
            "União Estável"
        ];
        
        foreach ($estadosCivis as $nome) {
            $estadoCivil->setNome($nome);
            $this->assertEquals($nome, $estadoCivil->getNome());
        }
    }

    public function testEstadoCivilNomeLength(): void
    {
        $estadoCivil = new EstadoCivil();
        
        // Test with different nome lengths
        $shortName = "Solteiro";
        $longName = "União Estável";
        
        $estadoCivil->setNome($shortName);
        $this->assertEquals($shortName, $estadoCivil->getNome());
        
        $estadoCivil->setNome($longName);
        $this->assertEquals($longName, $estadoCivil->getNome());
    }

    public function testEstadoCivilSpecialCharacters(): void
    {
        $estadoCivil = new EstadoCivil();
        
        // Test with special characters in names
        $nomesEspeciais = [
            "União Estável",
            "Divorciado(a)",
            "Viúvo(a)",
            "Separado(a)"
        ];
        
        foreach ($nomesEspeciais as $nome) {
            $estadoCivil->setNome($nome);
            $this->assertEquals($nome, $estadoCivil->getNome());
        }
    }

    public function testEstadoCivilReturnType(): void
    {
        $estadoCivil = new EstadoCivil();
        $nome = "Casado";
        
        // Test that setters return self for fluent interface
        $result = $estadoCivil->setNome($nome);
        $this->assertSame($estadoCivil, $result);
        $this->assertEquals($nome, $estadoCivil->getNome());
    }
}
