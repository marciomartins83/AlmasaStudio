<?php

namespace App\Tests\Entity;

use App\Entity\Cidades;
use PHPUnit\Framework\TestCase;

class CidadesTest extends TestCase
{
    public function testCreateCidade(): void
    {
        $cidade = new Cidades();
        $this->assertInstanceOf(Cidades::class, $cidade);
    }

    public function testCidadeGettersAndSetters(): void
    {
        $cidade = new Cidades();
        $idEstado = 25; // S達o Paulo
        $nome = "S達o Paulo";
        $codigo = "3550308";

        $cidade->setIdEstado($idEstado);
        $cidade->setNome($nome);
        $cidade->setCodigo($codigo);

        $this->assertEquals($idEstado, $cidade->getIdEstado());
        $this->assertEquals($nome, $cidade->getNome());
        $this->assertEquals($codigo, $cidade->getCodigo());
    }

    public function testCidadeId(): void
    {
        $cidade = new Cidades();
        
        // Test that ID starts as null (will be generated by DB)
        $this->assertNull($cidade->getId());
    }

    public function testCidadeCodigoNullable(): void
    {
        $cidade = new Cidades();
        
        // Test that codigo can be null
        $this->assertNull($cidade->getCodigo());
        
        // Test setting codigo to null
        $cidade->setCodigo(null);
        $this->assertNull($cidade->getCodigo());
    }

    public function testCidadeMethodsExist(): void
    {
        $cidade = new Cidades();
        
        // Test that all required methods exist
        $this->assertTrue(method_exists($cidade, 'getId'));
        $this->assertTrue(method_exists($cidade, 'getIdEstado'));
        $this->assertTrue(method_exists($cidade, 'setIdEstado'));
        $this->assertTrue(method_exists($cidade, 'getNome'));
        $this->assertTrue(method_exists($cidade, 'setNome'));
        $this->assertTrue(method_exists($cidade, 'getCodigo'));
        $this->assertTrue(method_exists($cidade, 'setCodigo'));
    }

    public function testCidadeWithDifferentEstados(): void
    {
        $cidade = new Cidades();
        
        // Test with different state IDs
        $estadoIds = [25, 33, 31, 43, 41]; // SP, RJ, MG, RS, PR
        
        foreach ($estadoIds as $estadoId) {
            $cidade->setIdEstado($estadoId);
            $this->assertEquals($estadoId, $cidade->getIdEstado());
        }
    }

    public function testCidadeNomeVariations(): void
    {
        $cidade = new Cidades();
        
        // Test with different city name formats
        $nomes = [
            "S達o Paulo",
            "Rio de Janeiro", 
            "Belo Horizonte",
            "Porto Alegre",
            "Curitiba"
        ];
        
        foreach ($nomes as $nome) {
            $cidade->setNome($nome);
            $this->assertEquals($nome, $cidade->getNome());
        }
    }

    public function testCidadeCodigoFormats(): void
    {
        $cidade = new Cidades();
        
        // Test with different IBGE code formats
        $codigos = [
            "3550308", // S達o Paulo
            "3304557", // Rio de Janeiro
            "3106200", // Belo Horizonte
            "4314902", // Porto Alegre
            "4106902"  // Curitiba
        ];
        
        foreach ($codigos as $codigo) {
            $cidade->setCodigo($codigo);
            $this->assertEquals($codigo, $cidade->getCodigo());
        }
    }
}
