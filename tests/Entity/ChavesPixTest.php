<?php

namespace App\Tests\Entity;

use App\Entity\ChavesPix;
use PHPUnit\Framework\TestCase;

class ChavesPixTest extends TestCase
{
    public function testCreateChavePix(): void
    {
        $chavePix = new ChavesPix();
        $this->assertInstanceOf(ChavesPix::class, $chavePix);
    }

    public function testChavePixGettersAndSetters(): void
    {
        $chavePix = new ChavesPix();
        $idPessoa = 1;
        $idTipoChave = 2;
        $chavePixValue = "12345678901";
        $idContaBancaria = 3;
        $principal = true;
        $ativo = true;

        $chavePix->setIdPessoa($idPessoa);
        $chavePix->setIdTipoChave($idTipoChave);
        $chavePix->setChavePix($chavePixValue);
        $chavePix->setIdContaBancaria($idContaBancaria);
        $chavePix->setPrincipal($principal);
        $chavePix->setAtivo($ativo);

        $this->assertEquals($idPessoa, $chavePix->getIdPessoa());
        $this->assertEquals($idTipoChave, $chavePix->getIdTipoChave());
        $this->assertEquals($chavePixValue, $chavePix->getChavePix());
        $this->assertEquals($idContaBancaria, $chavePix->getIdContaBancaria());
        $this->assertEquals($principal, $chavePix->getPrincipal());
        $this->assertEquals($ativo, $chavePix->getAtivo());
    }

    public function testChavePixId(): void
    {
        $chavePix = new ChavesPix();
        
        // Test that ID starts as null (will be generated by DB)
        $this->assertNull($chavePix->getId());
    }

    public function testChavePixContaBancariaNullable(): void
    {
        $chavePix = new ChavesPix();
        
        // Test that idContaBancaria can be null
        $this->assertNull($chavePix->getIdContaBancaria());
        
        // Test setting idContaBancaria to null
        $chavePix->setIdContaBancaria(null);
        $this->assertNull($chavePix->getIdContaBancaria());
    }

    public function testChavePixMethodsExist(): void
    {
        $chavePix = new ChavesPix();
        
        // Test that all required methods exist
        $this->assertTrue(method_exists($chavePix, 'getId'));
        $this->assertTrue(method_exists($chavePix, 'getIdPessoa'));
        $this->assertTrue(method_exists($chavePix, 'setIdPessoa'));
        $this->assertTrue(method_exists($chavePix, 'getIdTipoChave'));
        $this->assertTrue(method_exists($chavePix, 'setIdTipoChave'));
        $this->assertTrue(method_exists($chavePix, 'getChavePix'));
        $this->assertTrue(method_exists($chavePix, 'setChavePix'));
        $this->assertTrue(method_exists($chavePix, 'getIdContaBancaria'));
        $this->assertTrue(method_exists($chavePix, 'setIdContaBancaria'));
        $this->assertTrue(method_exists($chavePix, 'getPrincipal'));
        $this->assertTrue(method_exists($chavePix, 'setPrincipal'));
        $this->assertTrue(method_exists($chavePix, 'getAtivo'));
        $this->assertTrue(method_exists($chavePix, 'setAtivo'));
    }

    public function testChavePixVariousTypes(): void
    {
        $chavePix = new ChavesPix();
        
        // Test with different PIX key types
        $chaves = [
            "12345678901",                          // CPF
            "12345678000123",                       // CNPJ
            "user@example.com",                     // Email
            "+5511987654321",                       // Phone
            "a1b2c3d4-e5f6-7890-abcd-ef1234567890" // Random key
        ];
        
        foreach ($chaves as $chave) {
            $chavePix->setChavePix($chave);
            $this->assertEquals($chave, $chavePix->getChavePix());
        }
    }

    public function testChavePixBooleanFields(): void
    {
        $chavePix = new ChavesPix();
        
        // Test boolean combinations
        $chavePix->setPrincipal(true);
        $chavePix->setAtivo(true);
        $this->assertTrue($chavePix->getPrincipal());
        $this->assertTrue($chavePix->getAtivo());
        
        $chavePix->setPrincipal(false);
        $chavePix->setAtivo(false);
        $this->assertFalse($chavePix->getPrincipal());
        $this->assertFalse($chavePix->getAtivo());
    }

    public function testChavePixFluentInterface(): void
    {
        $chavePix = new ChavesPix();
        
        // Test that setters return self for fluent interface
        $result = $chavePix->setIdPessoa(1)
                          ->setIdTipoChave(2)
                          ->setChavePix("12345678901")
                          ->setPrincipal(true)
                          ->setAtivo(true);
        
        $this->assertSame($chavePix, $result);
        $this->assertEquals(1, $chavePix->getIdPessoa());
        $this->assertEquals(2, $chavePix->getIdTipoChave());
        $this->assertEquals("12345678901", $chavePix->getChavePix());
        $this->assertTrue($chavePix->getPrincipal());
        $this->assertTrue($chavePix->getAtivo());
    }

    public function testChavePixTipoChaveRelationship(): void
    {
        $chavePix = new ChavesPix();
        
        // Test with different tipo chave IDs (1=CPF, 2=CNPJ, 3=Email, 4=Phone, 5=Random)
        $tipoChaveIds = [1, 2, 3, 4, 5];
        
        foreach ($tipoChaveIds as $tipoId) {
            $chavePix->setIdTipoChave($tipoId);
            $this->assertEquals($tipoId, $chavePix->getIdTipoChave());
        }
    }

    public function testChavePixEmailFormat(): void
    {
        $chavePix = new ChavesPix();
        
        // Test with email PIX keys
        $emails = [
            "user@example.com",
            "joao.silva@gmail.com",
            "maria.santos@empresa.com.br",
            "teste123@domain.org"
        ];
        
        foreach ($emails as $email) {
            $chavePix->setChavePix($email);
            $this->assertEquals($email, $chavePix->getChavePix());
        }
    }

    public function testChavePixPhoneFormat(): void
    {
        $chavePix = new ChavesPix();
        
        // Test with phone PIX keys
        $phones = [
            "+5511987654321",
            "+5521998765432",
            "+5531912345678",
            "+5548999887766"
        ];
        
        foreach ($phones as $phone) {
            $chavePix->setChavePix($phone);
            $this->assertEquals($phone, $chavePix->getChavePix());
        }
    }
}
