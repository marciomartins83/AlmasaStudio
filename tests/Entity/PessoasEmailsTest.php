<?php

namespace App\Tests\Entity;

use App\Entity\PessoasEmails;
use PHPUnit\Framework\TestCase;

class PessoasEmailsTest extends TestCase
{
    public function testCreatePessoaEmail(): void
    {
        $pessoaEmail = new PessoasEmails();
        $this->assertInstanceOf(PessoasEmails::class, $pessoaEmail);
    }

    public function testPessoaEmailGettersAndSetters(): void
    {
        $pessoaEmail = new PessoasEmails();
        $idPessoa = 1;
        $idEmail = 2;

        $pessoaEmail->setIdPessoa($idPessoa);
        $pessoaEmail->setIdEmail($idEmail);

        $this->assertEquals($idPessoa, $pessoaEmail->getIdPessoa());
        $this->assertEquals($idEmail, $pessoaEmail->getIdEmail());
    }

    public function testPessoaEmailId(): void
    {
        $pessoaEmail = new PessoasEmails();
        
        // Test that ID starts as null (will be generated by DB)
        $this->assertNull($pessoaEmail->getId());
    }

    public function testPessoaEmailMethodsExist(): void
    {
        $pessoaEmail = new PessoasEmails();
        
        // Test that all required methods exist
        $this->assertTrue(method_exists($pessoaEmail, 'getId'));
        $this->assertTrue(method_exists($pessoaEmail, 'getIdPessoa'));
        $this->assertTrue(method_exists($pessoaEmail, 'setIdPessoa'));
        $this->assertTrue(method_exists($pessoaEmail, 'getIdEmail'));
        $this->assertTrue(method_exists($pessoaEmail, 'setIdEmail'));
    }

    public function testPessoaEmailDifferentIds(): void
    {
        $pessoaEmail = new PessoasEmails();
        
        // Test with different ID combinations
        $idCombinations = [
            [1, 10],
            [50, 25],
            [100, 999],
            [9999, 1],
            [12345, 67890]
        ];
        
        foreach ($idCombinations as [$idPessoa, $idEmail]) {
            $pessoaEmail->setIdPessoa($idPessoa);
            $pessoaEmail->setIdEmail($idEmail);
            
            $this->assertEquals($idPessoa, $pessoaEmail->getIdPessoa());
            $this->assertEquals($idEmail, $pessoaEmail->getIdEmail());
        }
    }

    public function testPessoaEmailFluentInterface(): void
    {
        $pessoaEmail = new PessoasEmails();
        
        // Test that setters return self for fluent interface
        $result = $pessoaEmail->setIdPessoa(1)
                             ->setIdEmail(2);
        
        $this->assertSame($pessoaEmail, $result);
        $this->assertEquals(1, $pessoaEmail->getIdPessoa());
        $this->assertEquals(2, $pessoaEmail->getIdEmail());
    }

    public function testPessoaEmailRelationshipMapping(): void
    {
        $pessoaEmail = new PessoasEmails();
        
        // Test typical use case: multiple emails for one person
        $idPessoa = 1;
        $emailIds = [10, 20, 30, 40];
        
        foreach ($emailIds as $emailId) {
            $pessoaEmail->setIdPessoa($idPessoa);
            $pessoaEmail->setIdEmail($emailId);
            
            $this->assertEquals($idPessoa, $pessoaEmail->getIdPessoa());
            $this->assertEquals($emailId, $pessoaEmail->getIdEmail());
        }
    }

    public function testPessoaEmailLargeIds(): void
    {
        $pessoaEmail = new PessoasEmails();
        
        // Test with large ID values (bigint support)
        $largeIdPessoa = 999999999;
        $largeIdEmail = 888888888;
        
        $pessoaEmail->setIdPessoa($largeIdPessoa);
        $pessoaEmail->setIdEmail($largeIdEmail);
        
        $this->assertEquals($largeIdPessoa, $pessoaEmail->getIdPessoa());
        $this->assertEquals($largeIdEmail, $pessoaEmail->getIdEmail());
    }

    public function testPessoaEmailMinimalIds(): void
    {
        $pessoaEmail = new PessoasEmails();
        
        // Test with minimal ID values
        $pessoaEmail->setIdPessoa(1);
        $pessoaEmail->setIdEmail(1);
        
        $this->assertEquals(1, $pessoaEmail->getIdPessoa());
        $this->assertEquals(1, $pessoaEmail->getIdEmail());
    }

    public function testPessoaEmailSequentialOperations(): void
    {
        $pessoaEmail = new PessoasEmails();
        
        // Test multiple sequential operations
        $pessoaEmail->setIdPessoa(1);
        $this->assertEquals(1, $pessoaEmail->getIdPessoa());
        
        $pessoaEmail->setIdEmail(10);
        $this->assertEquals(10, $pessoaEmail->getIdEmail());
        
        // Change values
        $pessoaEmail->setIdPessoa(2);
        $pessoaEmail->setIdEmail(20);
        
        $this->assertEquals(2, $pessoaEmail->getIdPessoa());
        $this->assertEquals(20, $pessoaEmail->getIdEmail());
    }

    public function testPessoaEmailManyToManyScenario(): void
    {
        // Simulate many-to-many relationship scenario
        $scenarios = [
            // Person 1 has multiple emails
            [1, 100],
            [1, 101],
            [1, 102],
            // Person 2 has one email
            [2, 200],
            // Person 3 has multiple emails
            [3, 300],
            [3, 301]
        ];
        
        foreach ($scenarios as [$idPessoa, $idEmail]) {
            $pessoaEmail = new PessoasEmails();
            $pessoaEmail->setIdPessoa($idPessoa);
            $pessoaEmail->setIdEmail($idEmail);
            
            $this->assertEquals($idPessoa, $pessoaEmail->getIdPessoa());
            $this->assertEquals($idEmail, $pessoaEmail->getIdEmail());
        }
    }
}
