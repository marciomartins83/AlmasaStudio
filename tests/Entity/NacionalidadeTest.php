<?php

namespace App\Tests\Entity;

use App\Entity\Nacionalidade;
use PHPUnit\Framework\TestCase;

class NacionalidadeTest extends TestCase
{
    public function testCreateNacionalidade(): void
    {
        $nacionalidade = new Nacionalidade();
        $this->assertInstanceOf(Nacionalidade::class, $nacionalidade);
    }

    public function testNacionalidadeGettersAndSetters(): void
    {
        $nacionalidade = new Nacionalidade();
        $nome = "Brasileira";

        $nacionalidade->setNome($nome);

        $this->assertEquals($nome, $nacionalidade->getNome());
    }

    public function testNacionalidadeId(): void
    {
        $nacionalidade = new Nacionalidade();
        
        // Test that ID starts as null (will be generated by DB)
        $this->assertNull($nacionalidade->getId());
    }

    public function testNacionalidadeMethodsExist(): void
    {
        $nacionalidade = new Nacionalidade();
        
        // Test that all required methods exist
        $this->assertTrue(method_exists($nacionalidade, 'getId'));
        $this->assertTrue(method_exists($nacionalidade, 'getNome'));
        $this->assertTrue(method_exists($nacionalidade, 'setNome'));
    }

    public function testNacionalidadeVariousNames(): void
    {
        $nacionalidade = new Nacionalidade();
        
        // Test with different nationalities
        $nacionalidades = [
            "Brasileira",
            "Americana",
            "Italiana",
            "Portuguesa",
            "Argentina",
            "Alemã",
            "Francesa",
            "Espanhola",
            "Japonesa",
            "Chinesa"
        ];
        
        foreach ($nacionalidades as $nome) {
            $nacionalidade->setNome($nome);
            $this->assertEquals($nome, $nacionalidade->getNome());
        }
    }

    public function testNacionalidadeNomeLength(): void
    {
        $nacionalidade = new Nacionalidade();
        
        // Test with different nome lengths
        $shortName = "BR";
        $longName = "República Democrática do Congo";
        
        $nacionalidade->setNome($shortName);
        $this->assertEquals($shortName, $nacionalidade->getNome());
        
        $nacionalidade->setNome($longName);
        $this->assertEquals($longName, $nacionalidade->getNome());
    }

    public function testNacionalidadeSpecialCharacters(): void
    {
        $nacionalidade = new Nacionalidade();
        
        // Test with special characters in names
        $nomesEspeciais = [
            "São-tomense",
            "Tcheca (República)",
            "Norte-americana",
            "Sul-africana"
        ];
        
        foreach ($nomesEspeciais as $nome) {
            $nacionalidade->setNome($nome);
            $this->assertEquals($nome, $nacionalidade->getNome());
        }
    }
}
