<?php

namespace App\Tests\Entity;

use App\Entity\Logradouros;
use PHPUnit\Framework\TestCase;

class LogradourosTest extends TestCase
{
    public function testCreateLogradouro(): void
    {
        $logradouro = new Logradouros();
        $this->assertInstanceOf(Logradouros::class, $logradouro);
    }

    public function testLogradouroGettersAndSetters(): void
    {
        $logradouro = new Logradouros();
        $idBairro = 1;
        $logradouroNome = "Rua das Flores";
        $cep = "01234-567";

        $logradouro->setIdBairro($idBairro);
        $logradouro->setLogradouro($logradouroNome);
        $logradouro->setCep($cep);

        $this->assertEquals($idBairro, $logradouro->getIdBairro());
        $this->assertEquals($logradouroNome, $logradouro->getLogradouro());
        $this->assertEquals($cep, $logradouro->getCep());
    }

    public function testLogradouroId(): void
    {
        $logradouro = new Logradouros();
        
        // Test that ID starts as null (will be generated by DB)
        $this->assertNull($logradouro->getId());
    }

    public function testLogradouroMethodsExist(): void
    {
        $logradouro = new Logradouros();
        
        // Test that all required methods exist
        $this->assertTrue(method_exists($logradouro, 'getId'));
        $this->assertTrue(method_exists($logradouro, 'getIdBairro'));
        $this->assertTrue(method_exists($logradouro, 'setIdBairro'));
        $this->assertTrue(method_exists($logradouro, 'getLogradouro'));
        $this->assertTrue(method_exists($logradouro, 'setLogradouro'));
        $this->assertTrue(method_exists($logradouro, 'getCep'));
        $this->assertTrue(method_exists($logradouro, 'setCep'));
    }

    public function testLogradouroNomeVariations(): void
    {
        $logradouro = new Logradouros();
        
        // Test with different street types
        $logradouros = [
            "Rua das Flores",
            "Avenida Paulista",
            "Travessa do Comércio",
            "Alameda Santos",
            "Praça da Sé",
            "Largo do Arouche",
            "Via Expressa",
            "Estrada de Santos"
        ];
        
        foreach ($logradouros as $nome) {
            $logradouro->setLogradouro($nome);
            $this->assertEquals($nome, $logradouro->getLogradouro());
        }
    }

    public function testLogradouroCepFormats(): void
    {
        $logradouro = new Logradouros();
        
        // Test with different CEP formats
        $ceps = [
            "01234-567",
            "04567-890",
            "12345678",
            "00000-000",
            "99999-999"
        ];
        
        foreach ($ceps as $cep) {
            $logradouro->setCep($cep);
            $this->assertEquals($cep, $logradouro->getCep());
        }
    }

    public function testLogradouroBairroRelationship(): void
    {
        $logradouro = new Logradouros();
        
        // Test with different bairro IDs
        $bairroIds = [1, 50, 100, 999, 1234];
        
        foreach ($bairroIds as $bairroId) {
            $logradouro->setIdBairro($bairroId);
            $this->assertEquals($bairroId, $logradouro->getIdBairro());
        }
    }

    public function testLogradouroFluentInterface(): void
    {
        $logradouro = new Logradouros();
        
        // Test that setters return self for fluent interface
        $result = $logradouro->setIdBairro(1)
                            ->setLogradouro("Rua das Flores")
                            ->setCep("01234-567");
        
        $this->assertSame($logradouro, $result);
        $this->assertEquals(1, $logradouro->getIdBairro());
        $this->assertEquals("Rua das Flores", $logradouro->getLogradouro());
        $this->assertEquals("01234-567", $logradouro->getCep());
    }

    public function testLogradouroSpecialCharacters(): void
    {
        $logradouro = new Logradouros();
        
        // Test with special characters in street names
        $nomesEspeciais = [
            "Rua São João",
            "Avenida dos Três Poderes",
            "Travessa João & Maria",
            "Alameda São José dos Campos",
            "Praça D. Pedro II"
        ];
        
        foreach ($nomesEspeciais as $nome) {
            $logradouro->setLogradouro($nome);
            $this->assertEquals($nome, $logradouro->getLogradouro());
        }
    }
}
