<?php

namespace App\Tests\Entity;

use App\Entity\Enderecos;
use PHPUnit\Framework\TestCase;

class EnderecosTest extends TestCase
{
    public function testCreateEndereco(): void
    {
        $endereco = new Enderecos();
        $this->assertInstanceOf(Enderecos::class, $endereco);
    }

    public function testEnderecoGettersAndSetters(): void
    {
        $endereco = new Enderecos();
        $idPessoa = 1;
        $idLogradouro = 123;
        $idTipo = 2;
        $endNumero = 456;
        $complemento = "Apto 101";

        $endereco->setIdPessoa($idPessoa);
        $endereco->setIdLogradouro($idLogradouro);
        $endereco->setIdTipo($idTipo);
        $endereco->setEndNumero($endNumero);
        $endereco->setComplemento($complemento);

        $this->assertEquals($idPessoa, $endereco->getIdPessoa());
        $this->assertEquals($idLogradouro, $endereco->getIdLogradouro());
        $this->assertEquals($idTipo, $endereco->getIdTipo());
        $this->assertEquals($endNumero, $endereco->getEndNumero());
        $this->assertEquals($complemento, $endereco->getComplemento());
    }

    public function testEnderecoId(): void
    {
        $endereco = new Enderecos();
        
        // Test that ID starts as null (will be generated by DB)
        $this->assertNull($endereco->getId());
    }

    public function testEnderecoComplementoNullable(): void
    {
        $endereco = new Enderecos();
        
        // Test that complemento can be null
        $this->assertNull($endereco->getComplemento());
        
        // Test setting complemento to null
        $endereco->setComplemento(null);
        $this->assertNull($endereco->getComplemento());
    }

    public function testEnderecoMethodsExist(): void
    {
        $endereco = new Enderecos();
        
        // Test that all required methods exist
        $this->assertTrue(method_exists($endereco, 'getId'));
        $this->assertTrue(method_exists($endereco, 'getIdPessoa'));
        $this->assertTrue(method_exists($endereco, 'setIdPessoa'));
        $this->assertTrue(method_exists($endereco, 'getIdLogradouro'));
        $this->assertTrue(method_exists($endereco, 'setIdLogradouro'));
        $this->assertTrue(method_exists($endereco, 'getIdTipo'));
        $this->assertTrue(method_exists($endereco, 'setIdTipo'));
        $this->assertTrue(method_exists($endereco, 'getEndNumero'));
        $this->assertTrue(method_exists($endereco, 'setEndNumero'));
        $this->assertTrue(method_exists($endereco, 'getComplemento'));
        $this->assertTrue(method_exists($endereco, 'setComplemento'));
    }

    public function testEnderecoNumeroValues(): void
    {
        $endereco = new Enderecos();
        
        // Test with different number values
        $numeros = [1, 100, 999, 1234, 9999];
        
        foreach ($numeros as $numero) {
            $endereco->setEndNumero($numero);
            $this->assertEquals($numero, $endereco->getEndNumero());
        }
    }

    public function testEnderecoComplementoVariations(): void
    {
        $endereco = new Enderecos();
        
        // Test with different complement formats
        $complementos = [
            "Apto 101",
            "Casa A",
            "Bloco 2",
            "Sala 503",
            "Fundos",
            "Térreo",
            "2º Andar"
        ];
        
        foreach ($complementos as $complemento) {
            $endereco->setComplemento($complemento);
            $this->assertEquals($complemento, $endereco->getComplemento());
        }
    }

    public function testEnderecoIdRelationships(): void
    {
        $endereco = new Enderecos();
        
        // Test with different ID combinations
        $endereco->setIdPessoa(1);
        $endereco->setIdLogradouro(100);
        $endereco->setIdTipo(2);
        
        $this->assertEquals(1, $endereco->getIdPessoa());
        $this->assertEquals(100, $endereco->getIdLogradouro());
        $this->assertEquals(2, $endereco->getIdTipo());
    }

    public function testEnderecoFluentInterface(): void
    {
        $endereco = new Enderecos();
        
        // Test that setters return self for fluent interface
        $result = $endereco->setIdPessoa(1)
                          ->setIdLogradouro(100)
                          ->setIdTipo(2)
                          ->setEndNumero(123)
                          ->setComplemento("Apto 101");
        
        $this->assertSame($endereco, $result);
        $this->assertEquals(1, $endereco->getIdPessoa());
        $this->assertEquals(100, $endereco->getIdLogradouro());
        $this->assertEquals(2, $endereco->getIdTipo());
        $this->assertEquals(123, $endereco->getEndNumero());
        $this->assertEquals("Apto 101", $endereco->getComplemento());
    }
}
