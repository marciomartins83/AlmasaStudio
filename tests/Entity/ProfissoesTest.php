<?php

namespace App\Tests\Entity;

use App\Entity\Profissoes;
use PHPUnit\Framework\TestCase;

class ProfissoesTest extends TestCase
{
    public function testCreateProfissao(): void
    {
        $profissao = new Profissoes();
        $this->assertInstanceOf(Profissoes::class, $profissao);
    }

    public function testProfissaoGettersAndSetters(): void
    {
        $profissao = new Profissoes();
        $nome = "Engenheiro de Software";
        $descricao = "Desenvolve e mantém sistemas de software";
        $ativo = true;

        $profissao->setNome($nome);
        $profissao->setDescricao($descricao);
        $profissao->setAtivo($ativo);

        $this->assertEquals($nome, $profissao->getNome());
        $this->assertEquals($descricao, $profissao->getDescricao());
        $this->assertEquals($ativo, $profissao->getAtivo());
    }

    public function testProfissaoId(): void
    {
        $profissao = new Profissoes();
        
        // Test that ID starts as null (will be generated by DB)
        $this->assertNull($profissao->getId());
    }

    public function testProfissaoDescricaoNullable(): void
    {
        $profissao = new Profissoes();
        
        // Test that descricao can be null
        $this->assertNull($profissao->getDescricao());
        
        // Test setting descricao to null
        $profissao->setDescricao(null);
        $this->assertNull($profissao->getDescricao());
    }

    public function testProfissaoMethodsExist(): void
    {
        $profissao = new Profissoes();
        
        // Test that all required methods exist
        $this->assertTrue(method_exists($profissao, 'getId'));
        $this->assertTrue(method_exists($profissao, 'getNome'));
        $this->assertTrue(method_exists($profissao, 'setNome'));
        $this->assertTrue(method_exists($profissao, 'getDescricao'));
        $this->assertTrue(method_exists($profissao, 'setDescricao'));
        $this->assertTrue(method_exists($profissao, 'getAtivo'));
        $this->assertTrue(method_exists($profissao, 'setAtivo'));
    }

    public function testProfissaoVariousNames(): void
    {
        $profissao = new Profissoes();
        
        // Test with different profession names
        $profissoes = [
            "Médico",
            "Advogado",
            "Professor",
            "Engenheiro Civil",
            "Arquiteto",
            "Contador",
            "Dentista",
            "Enfermeiro",
            "Psicólogo",
            "Veterinário"
        ];
        
        foreach ($profissoes as $nome) {
            $profissao->setNome($nome);
            $this->assertEquals($nome, $profissao->getNome());
        }
    }

    public function testProfissaoDescricaoVariations(): void
    {
        $profissao = new Profissoes();
        
        // Test with different descriptions
        $descricoes = [
            "Profissional da área da saúde",
            "Profissional do direito",
            "Educador e instrutor",
            "Especialista em construção civil",
            "Designer de espaços e edificações",
            "Especialista em contabilidade",
            "Profissional da odontologia",
            "Cuidador da saúde",
            "Especialista em comportamento humano",
            "Médico de animais"
        ];
        
        foreach ($descricoes as $descricao) {
            $profissao->setDescricao($descricao);
            $this->assertEquals($descricao, $profissao->getDescricao());
        }
    }

    public function testProfissaoAtivoStatus(): void
    {
        $profissao = new Profissoes();
        
        // Test setting active status
        $profissao->setAtivo(true);
        $this->assertTrue($profissao->getAtivo());
        
        $profissao->setAtivo(false);
        $this->assertFalse($profissao->getAtivo());
    }

    public function testProfissaoFluentInterface(): void
    {
        $profissao = new Profissoes();
        
        // Test that setters return self for fluent interface
        $result = $profissao->setNome("Médico")
                           ->setDescricao("Profissional da área da saúde")
                           ->setAtivo(true);
        
        $this->assertSame($profissao, $result);
        $this->assertEquals("Médico", $profissao->getNome());
        $this->assertEquals("Profissional da área da saúde", $profissao->getDescricao());
        $this->assertTrue($profissao->getAtivo());
    }

    public function testProfissaoLongTexts(): void
    {
        $profissao = new Profissoes();
        
        // Test with long texts
        $longNome = "Especialista em Desenvolvimento de Software com foco em Arquitetura de Sistemas";
        $longDescricao = str_repeat("Esta é uma descrição muito longa de uma profissão complexa. ", 10);
        
        $profissao->setNome($longNome);
        $profissao->setDescricao($longDescricao);
        
        $this->assertEquals($longNome, $profissao->getNome());
        $this->assertEquals($longDescricao, $profissao->getDescricao());
    }

    public function testProfissaoSpecialCharacters(): void
    {
        $profissao = new Profissoes();
        
        // Test with special characters in names
        $nomesEspeciais = [
            "Técnico em Informática",
            "Analista de Sistemas Jr.",
            "Gerente de Vendas & Marketing",
            "Designer Gráfico",
            "Consultor em T.I."
        ];
        
        foreach ($nomesEspeciais as $nome) {
            $profissao->setNome($nome);
            $this->assertEquals($nome, $profissao->getNome());
        }
    }

    public function testProfissaoWithoutDescricao(): void
    {
        $profissao = new Profissoes();
        
        // Test complete profession without description
        $profissao->setNome("Advogado");
        $profissao->setAtivo(true);
        
        $this->assertEquals("Advogado", $profissao->getNome());
        $this->assertNull($profissao->getDescricao());
        $this->assertTrue($profissao->getAtivo());
    }
}
