<?php

namespace App\Tests\Entity;

use App\Entity\Estados;
use PHPUnit\Framework\TestCase;

class EstadosTest extends TestCase
{
    public function testCreateEstado(): void
    {
        $estado = new Estados();
        $this->assertInstanceOf(Estados::class, $estado);
    }

    public function testEstadoGettersAndSetters(): void
    {
        $estado = new Estados();
        $uf = "SP";
        $nome = "SÃ£o Paulo";

        $estado->setUf($uf);
        $estado->setNome($nome);

        $this->assertEquals($uf, $estado->getUf());
        $this->assertEquals($nome, $estado->getNome());
    }

    public function testEstadoId(): void
    {
        $estado = new Estados();
        
        // Test that ID starts as null (will be generated by DB)
        $this->assertNull($estado->getId());
    }

    public function testEstadoMethodsExist(): void
    {
        $estado = new Estados();
        
        // Test that all required methods exist
        $this->assertTrue(method_exists($estado, 'getId'));
        $this->assertTrue(method_exists($estado, 'getUf'));
        $this->assertTrue(method_exists($estado, 'setUf'));
        $this->assertTrue(method_exists($estado, 'getNome'));
        $this->assertTrue(method_exists($estado, 'setNome'));
    }

    public function testEstadoUfFormat(): void
    {
        $estado = new Estados();
        
        // Test with different UF formats
        $validUfs = ['SP', 'RJ', 'MG', 'RS', 'PR'];
        
        foreach ($validUfs as $uf) {
            $estado->setUf($uf);
            $this->assertEquals($uf, $estado->getUf());
        }
    }

    public function testEstadoNomeLength(): void
    {
        $estado = new Estados();
        
        // Test with different nome lengths
        $shortName = "SP";
        $longName = "Rio Grande do Norte";
        
        $estado->setNome($shortName);
        $this->assertEquals($shortName, $estado->getNome());
        
        $estado->setNome($longName);
        $this->assertEquals($longName, $estado->getNome());
    }
}
