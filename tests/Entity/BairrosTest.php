<?php

namespace App\Tests\Entity;

use App\Entity\Bairros;
use PHPUnit\Framework\TestCase;

class BairrosTest extends TestCase
{
    public function testCreateBairro(): void
    {
        $bairro = new Bairros();
        $this->assertInstanceOf(Bairros::class, $bairro);
    }

    public function testBairroGettersAndSetters(): void
    {
        $bairro = new Bairros();
        $idCidade = 1;
        $nome = "Centro";
        $codigo = "001";

        $bairro->setIdCidade($idCidade);
        $bairro->setNome($nome);
        $bairro->setCodigo($codigo);

        $this->assertEquals($idCidade, $bairro->getIdCidade());
        $this->assertEquals($nome, $bairro->getNome());
        $this->assertEquals($codigo, $bairro->getCodigo());
    }

    public function testBairroId(): void
    {
        $bairro = new Bairros();
        
        // Test that ID starts as null (will be generated by DB)
        $this->assertNull($bairro->getId());
    }

    public function testBairroCodigoNullable(): void
    {
        $bairro = new Bairros();
        
        // Test that codigo can be null
        $this->assertNull($bairro->getCodigo());
        
        // Test setting codigo to null
        $bairro->setCodigo(null);
        $this->assertNull($bairro->getCodigo());
    }

    public function testBairroMethodsExist(): void
    {
        $bairro = new Bairros();
        
        // Test that all required methods exist
        $this->assertTrue(method_exists($bairro, 'getId'));
        $this->assertTrue(method_exists($bairro, 'getIdCidade'));
        $this->assertTrue(method_exists($bairro, 'setIdCidade'));
        $this->assertTrue(method_exists($bairro, 'getNome'));
        $this->assertTrue(method_exists($bairro, 'setNome'));
        $this->assertTrue(method_exists($bairro, 'getCodigo'));
        $this->assertTrue(method_exists($bairro, 'setCodigo'));
    }

    public function testBairroNomeVariations(): void
    {
        $bairro = new Bairros();
        
        // Test with different neighborhood names
        $nomes = [
            "Centro",
            "Vila Madalena", 
            "Jardim Paulista",
            "Copacabana",
            "Ipanema",
            "Savassi",
            "Boa Viagem",
            "Moinhos de Vento"
        ];
        
        foreach ($nomes as $nome) {
            $bairro->setNome($nome);
            $this->assertEquals($nome, $bairro->getNome());
        }
    }

    public function testBairroCidadeRelationship(): void
    {
        $bairro = new Bairros();
        
        // Test with different cidade IDs
        $cidadeIds = [1, 25, 33, 31, 43]; // Different city IDs
        
        foreach ($cidadeIds as $cidadeId) {
            $bairro->setIdCidade($cidadeId);
            $this->assertEquals($cidadeId, $bairro->getIdCidade());
        }
    }

    public function testBairroFluentInterface(): void
    {
        $bairro = new Bairros();
        
        // Test that setters return self for fluent interface
        $result = $bairro->setIdCidade(1)
                        ->setNome("Centro")
                        ->setCodigo("001");
        
        $this->assertSame($bairro, $result);
        $this->assertEquals(1, $bairro->getIdCidade());
        $this->assertEquals("Centro", $bairro->getNome());
        $this->assertEquals("001", $bairro->getCodigo());
    }

    public function testBairroCodigoFormats(): void
    {
        $bairro = new Bairros();
        
        // Test with different code formats
        $codigos = [
            "001",
            "ABC123",
            "CENTRO",
            "999",
            null
        ];
        
        foreach ($codigos as $codigo) {
            $bairro->setCodigo($codigo);
            $this->assertEquals($codigo, $bairro->getCodigo());
        }
    }

    public function testBairroSpecialCharacters(): void
    {
        $bairro = new Bairros();
        
        // Test with special characters in names
        $nomesEspeciais = [
            "São João",
            "Jardim D'Abril",
            "Vila São José",
            "Parque das Águas",
            "Alto da Boa Vista"
        ];
        
        foreach ($nomesEspeciais as $nome) {
            $bairro->setNome($nome);
            $this->assertEquals($nome, $bairro->getNome());
        }
    }
}
